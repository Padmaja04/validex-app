import streamlit as st
import pandas as pd
import os
from datetime import datetime
import pyodbc
import math
import folium
from streamlit_folium import st_folium
from geopy.distance import geodesic
import base64
import json

# Import your existing utilities
from utils.biometric_utils import compare_faces
from utils.data_helpers import get_greeting
from config import *

# ===== PWA Configuration with Embedded Assets =====
def get_pwa_manifest():
    """Generate PWA manifest as embedded JSON"""
    manifest = {
        "name": "Company Attendance System",
        "short_name": "Attendance",
        "description": "Employee Attendance with Face Recognition and GPS",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#667eea",
        "theme_color": "#764ba2",
        "orientation": "portrait",
        "scope": "/",
        "icons": [
            {
                "src": "data:image/png;base64," + get_icon_base64(72),
                "sizes": "72x72",
                "type": "image/png",
                "purpose": "any maskable"
            },
            {
                "src": "data:image/png;base64," + get_icon_base64(96),
                "sizes": "96x96",
                "type": "image/png",
                "purpose": "any maskable"
            },
            {
                "src": "data:image/png;base64," + get_icon_base64(128),
                "sizes": "128x128",
                "type": "image/png",
                "purpose": "any maskable"
            },
            {
                "src": "data:image/png;base64," + get_icon_base64(192),
                "sizes": "192x192",
                "type": "image/png",
                "purpose": "any maskable"
            }
        ]
    }
    return json.dumps(manifest)

def get_icon_base64(size):
    """Generate a simple icon as base64 - you can replace this with actual icons"""
    # This creates a simple colored square icon
    # In production, replace with actual base64 encoded PNG icons
    return "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="

def get_service_worker():
    """Generate Service Worker JavaScript"""
    return """
const CACHE_NAME = 'attendance-v1';
const urlsToCache = [
    '/',
    '/manifest.json'
];

self.addEventListener('install', function(event) {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then(function(cache) {
                return cache.addAll(urlsToCache);
            })
    );
});

self.addEventListener('fetch', function(event) {
    event.respondWith(
        caches.match(event.request)
            .then(function(response) {
                if (response) {
                    return response;
                }
                return fetch(event.request);
            }
        )
    );
});

self.addEventListener('activate', function(event) {
    event.waitUntil(
        caches.keys().then(function(cacheNames) {
            return Promise.all(
                cacheNames.map(function(cacheName) {
                    if (cacheName !== CACHE_NAME) {
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});
"""

def setup_pwa():
    """Configure PWA settings with embedded assets"""
    st.set_page_config(
        page_title="Company Attendance System",
        page_icon="📱",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

    # Embed manifest and service worker
    manifest_json = get_pwa_manifest()
    sw_js = get_service_worker()

    st.markdown(f"""
    <head>
        <!-- PWA Meta Tags -->
        <meta name="theme-color" content="#764ba2">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="default">
        <meta name="apple-mobile-web-app-title" content="Attendance">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    </head>
    
    <script>
        // Embed manifest as blob URL
        const manifestData = {manifest_json};
        const manifestBlob = new Blob([JSON.stringify(manifestData)], {{type: 'application/json'}});
        const manifestUrl = URL.createObjectURL(manifestBlob);
        
        const link = document.createElement('link');
        link.rel = 'manifest';
        link.href = manifestUrl;
        document.head.appendChild(link);
        
        // Embed service worker
        const swData = `{sw_js}`;
        const swBlob = new Blob([swData], {{type: 'application/javascript'}});
        const swUrl = URL.createObjectURL(swBlob);
        
        // Register service worker
        if ('serviceWorker' in navigator) {{
            window.addEventListener('load', function() {{
                navigator.serviceWorker.register(swUrl)
                .then(function(registration) {{
                    console.log('SW registered: ', registration);
                }})
                .catch(function(registrationError) {{
                    console.log('SW registration failed: ', registrationError);
                }});
            }});
        }}

        // PWA install prompt
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {{
            e.preventDefault();
            deferredPrompt = e;
            document.getElementById('install-btn').style.display = 'inline-block';
        }});

        window.installPWA = async function() {{
            if (deferredPrompt) {{
                deferredPrompt.prompt();
                const {{ outcome }} = await deferredPrompt.userChoice;
                console.log(`User response: ${{outcome}}`);
                deferredPrompt = null;
                if (outcome === 'accepted') {{
                    document.getElementById('install-btn').style.display = 'none';
                }}
            }}
        }}

        // Hide install button after installation
        window.addEventListener('appinstalled', (evt) => {{
            document.getElementById('install-btn').style.display = 'none';
        }});
    </script>
    """, unsafe_allow_html=True)

# ===== Enhanced Mobile CSS =====
def apply_mobile_css():
    st.markdown("""
    <style>
    /* Mobile-first responsive design */
    .stApp {
        max-width: 100%;
        margin: 0;
        padding: 0;
    }

    .main > div {
        padding-top: 1rem;
        padding-left: 1rem;
        padding-right: 1rem;
        max-width: 100%;
    }

    /* PWA Header */
    .pwa-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        margin: -1rem -1rem 1rem -1rem;
        text-align: center;
        position: sticky;
        top: 0;
        z-index: 1000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .pwa-header h1 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .pwa-header p {
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
        font-size: 0.9rem;
    }

    /* Install PWA Button */
    .install-pwa-btn {
        background: rgba(255,255,255,0.2);
        border: 1px solid rgba(255,255,255,0.3);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        cursor: pointer;
        margin-top: 10px;
        backdrop-filter: blur(10px);
        display: none;
    }

    .install-pwa-btn:hover {
        background: rgba(255,255,255,0.3);
    }

    /* Location Status Cards */
    .location-status {
        padding: 1rem;
        border-radius: 12px;
        text-align: center;
        margin: 1rem 0;
        font-weight: bold;
        font-size: 1rem;
    }

    .location-approved {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        box-shadow: 0 5px 15px rgba(76,175,80,0.3);
    }

    .location-denied {
        background: linear-gradient(135deg, #f44336, #da190b);
        color: white;
        box-shadow: 0 5px 15px rgba(244,67,54,0.3);
    }

    /* Step indicators */
    .step-indicator {
        display: flex;
        align-items: center;
        margin: 1rem 0;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 10px;
        border-left: 4px solid #667eea;
    }

    .step-indicator.completed {
        background: #e8f5e8;
        border-left-color: #4CAF50;
    }

    .step-indicator.current {
        background: #fff3e0;
        border-left-color: #ff9800;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(255, 152, 0, 0.4); }
        70% { box-shadow: 0 0 0 10px rgba(255, 152, 0, 0); }
        100% { box-shadow: 0 0 0 0 rgba(255, 152, 0, 0); }
    }

    .step-number {
        background: #667eea;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        font-weight: bold;
        font-size: 14px;
    }

    .step-indicator.completed .step-number {
        background: #4CAF50;
    }

    .step-indicator.current .step-number {
        background: #ff9800;
    }

    /* Success cards */
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        animation: slideIn 0.5s ease-out;
    }

    @keyframes slideIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .metric-card h3 {
        margin: 0 0 1rem 0;
        font-size: 1.3rem;
    }

    .metric-card p {
        margin: 0.5rem 0;
        font-size: 1rem;
    }

    /* Button enhancements */
    .stButton > button {
        width: 100%;
        height: 50px;
        font-size: 16px;
        font-weight: bold;
        margin: 0.5rem 0;
        border-radius: 12px;
        border: none;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    /* Camera input styling */
    .stCamera > div > div {
        width: 100% !important;
        max-width: 350px;
        margin: 0 auto;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

    /* Attendance history cards */
    .attendance-card {
        border: 1px solid #e0e0e0;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 12px;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

    .attendance-card:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    /* Offline indicator */
    .offline-indicator {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: #ff5722;
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        font-size: 14px;
        z-index: 1001;
        display: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }

    /* Mobile optimizations */
    @media (max-width: 768px) {
        .stCamera {
            padding: 0 !important;
        }

        .stSelectbox {
            margin-bottom: 1rem;
        }

        .stDataFrame {
            font-size: 12px;
        }

        /* PWA full screen support */
        @media (display-mode: standalone) {
            .pwa-header {
                padding-top: env(safe-area-inset-top, 1rem);
            }
            
            body {
                padding-bottom: env(safe-area-inset-bottom, 0);
            }
        }
    }

    /* Loading animation */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    </style>
    """, unsafe_allow_html=True)

# ===== Enhanced Geolocation =====
def get_user_location():
    """Enhanced geolocation with better error handling"""
    st.markdown("""
    <div class="offline-indicator" id="offline-indicator">
        📵 You're offline. Some features may be limited.
    </div>

    <script>
    function getLocationPWA() {
        if (!navigator.onLine) {
            document.getElementById('offline-indicator').style.display = 'block';
            setTimeout(() => {
                document.getElementById('offline-indicator').style.display = 'none';
            }, 5000);
        }

        if (navigator.geolocation) {
            const options = {
                enableHighAccuracy: true,
                timeout: 15000,
                maximumAge: 300000
            };

            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const locationData = {
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude,
                        accuracy: position.coords.accuracy,
                        timestamp: new Date().toISOString()
                    };

                    // Store for offline use
                    try {
                        localStorage.setItem('lastKnownLocation', JSON.stringify(locationData));
                    } catch(e) {
                        console.log('Storage not available');
                    }

                    // Send to Streamlit (this won't work in artifacts but shows the concept)
                    console.log('Location retrieved:', locationData);
                    alert('Location retrieved successfully!');
                    
                    // In real implementation, you'd send this to Streamlit via session state
                },
                function(error) {
                    let errorMsg = '';
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            errorMsg = "Location access denied. Please enable location permissions in your browser settings.";
                            break;
                        case error.POSITION_UNAVAILABLE:
                            errorMsg = "Location information unavailable. Please try again.";
                            break;
                        case error.TIMEOUT:
                            errorMsg = "Location request timed out. Please try again.";
                            break;
                        default:
                            errorMsg = "An unknown error occurred while retrieving location.";
                            break;
                    }
                    alert(errorMsg);
                },
                options
            );
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    }

    // Online/Offline detection
    window.addEventListener('online', function() {
        document.getElementById('offline-indicator').style.display = 'none';
        console.log('Back online');
    });

    window.addEventListener('offline', function() {
        document.getElementById('offline-indicator').style.display = 'block';
        console.log('Gone offline');
    });
    </script>
    """, unsafe_allow_html=True)

# ===== PWA Header Component =====
def render_pwa_header():
    """Render PWA-style header"""
    st.markdown("""
    <div class="pwa-header">
        <h1>📱 Company Attendance</h1>
        <p>Facial Recognition + GPS Verification</p>
        <button class="install-pwa-btn" onclick="installPWA()" id="install-btn">
            📱 Install App
        </button>
    </div>
    """, unsafe_allow_html=True)

# ===== Step Indicator Component =====
def render_step_indicator(step_num, title, completed=False, current=False):
    """Render step indicator with completion status"""
    status_icon = "✅" if completed else ("🔄" if current else "⭕")
    status_class = "completed" if completed else ("current" if current else "pending")

    st.markdown(f"""
    <div class="step-indicator {status_class}">
        <div class="step-number">{step_num}</div>
        <div>
            <strong>{status_icon} {title}</strong>
        </div>
    </div>
    """, unsafe_allow_html=True)

# ===== Location Configuration =====
OFFICE_LOCATION = {
    "lat": 16.7050,
    "lon": 74.2433,
    "name": "Main Office",
    "radius": 100
}

ALLOWED_LOCATIONS = [
    {"lat": 16.7050, "lon": 74.2433, "name": "Main Office", "radius": 100},
    {"lat": 16.7040, "lon": 74.2440, "name": "Branch Office", "radius": 150},
]

def check_location_permission(user_lat, user_lon):
    """Check if user is within allowed location radius"""
    user_location = (user_lat, user_lon)
    
    for location in ALLOWED_LOCATIONS:
        office_location = (location["lat"], location["lon"])
        distance = geodesic(user_location, office_location).meters
        
        if distance <= location["radius"]:
            return True, location["name"], distance
    
    return False, None, None

def display_location_map(user_lat=None, user_lon=None):
    """Display interactive map"""
    m = folium.Map(
        location=[OFFICE_LOCATION["lat"], OFFICE_LOCATION["lon"]],
        zoom_start=15,
        tiles='OpenStreetMap'
    )
    
    # Add office locations
    for location in ALLOWED_LOCATIONS:
        folium.CircleMarker(
            location=[location["lat"], location["lon"]],
            radius=10,
            popup=f"{location['name']}\nRadius: {location['radius']}m",
            color='green',
            fill=True,
            fillColor='lightgreen',
            fillOpacity=0.7
        ).add_to(m)
        
        folium.Circle(
            location=[location["lat"], location["lon"]],
            radius=location["radius"],
            color='green',
            fill=True,
            fillColor='lightgreen',
            fillOpacity=0.2,
            popup=f"Allowed area for {location['name']}"
        ).add_to(m)
    
    # Add user location if available
    if user_lat and user_lon:
        folium.Marker(
            location=[user_lat, user_lon],
            popup="Your Location",
            icon=folium.Icon(color='red', icon='user')
        ).add_to(m)
    
    return m

# ===== Database Functions (simplified for demo) =====
def load_employee_master():
    """Load employee master data - replace with your actual implementation"""
    # This is a placeholder - use your existing function
    if USE_SQL:
        with get_sql_connection() as conn:
            return pd.read_sql(f"SELECT * FROM {EMPLOYEE_MASTER_TABLE}", conn)
    else:
        return pd.read_csv(EMPLOYEE_MASTER_CSV, dtype={"employee_id": str})

def load_attendance():
    """Load attendance data - replace with your actual implementation"""
    # This is a placeholder - use your existing function
    if USE_SQL:
        with get_sql_connection() as conn:
            return pd.read_sql(f"SELECT * FROM {EMPLOYEE_DATA_TABLE}", conn)
    else:
        if os.path.exists(EMPLOYEE_DATA_CSV):
            return pd.read_csv(EMPLOYEE_DATA_CSV, parse_dates=["start_datetime", "exit_datetime"])
        return pd.DataFrame(columns=[
            "employee_id", "employee_name", "start_datetime", "exit_datetime",
            "date_only", "total_hours", "extra_hours", "extra_pay",
            "attendance_status", "late_mark", "method", "confidence", "notes",
            "location_lat", "location_lon", "location_verified", "location_name"
        ])

def save_attendance(df):
    """Save attendance data - replace with your actual implementation"""
    # Use your existing save_attendance function
    pass

# ===== Main Application =====
def run_attendance():
    """Main attendance application with PWA support"""
    
    # Setup PWA
    setup_pwa()
    
    # Apply mobile CSS
    apply_mobile_css()
    
    # Render PWA header
    render_pwa_header()
    
    # Initialize session state
    if "location_data" not in st.session_state:
        st.session_state.location_data = None
    if "location_verified" not in st.session_state:
        st.session_state.location_verified = False
    
    # Step 1: Location verification
    step1_completed = st.session_state.location_verified
    render_step_indicator(1, "Verify Your Location", completed=step1_completed, current=not step1_completed)
    
    if not step1_completed:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            if st.button("📍 Get My Location", key="location_btn"):
                get_user_location()
                # In real implementation, this would trigger the location detection
                # For demo purposes, we'll simulate it
                st.session_state.location_data = {
                    "latitude": OFFICE_LOCATION["lat"] + 0.0001,
                    "longitude": OFFICE_LOCATION["lon"] + 0.0001,
                    "accuracy": 10,
                    "timestamp": datetime.now().isoformat()
                }
        
        with col2:
            if st.button("🧪 Test Location", key="test_location"):
                st.session_state.location_data = {
                    "latitude": OFFICE_LOCATION["lat"] + 0.0001,
                    "longitude": OFFICE_LOCATION["lon"] + 0.0001,
                    "accuracy": 10,
                    "timestamp": datetime.now().isoformat()
                }
    
    # Location verification status
    if st.session_state.location_data:
        user_lat = st.session_state.location_data["latitude"]
        user_lon = st.session_state.location_data["longitude"]
        
        is_allowed, location_name, distance = check_location_permission(user_lat, user_lon)
        st.session_state.location_verified = is_allowed
        
        if is_allowed:
            st.markdown(f"""
            <div class="location-status location-approved">
                ✅ Location Verified: {location_name}<br>
                Distance: {distance:.1f}m from office
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="location-status location-denied">
                ❌ Location Not Allowed<br>
                You must be within office premises to mark attendance
            </div>
            """, unsafe_allow_html=True)
        
        # Display map
        st.markdown("#### 🗺️ Your Location")
        m = display_location_map(user_lat, user_lon)
        st_folium(m, height=300, width=None, key="location_map")
    
    # Only proceed if location is verified
    if not st.session_state.location_verified:
        st.warning("📍 Please verify your location first to continue with attendance.")
        return
    
    # Step 2: Employee selection
    render_step_indicator(2, "Select Employee", completed=True, current=True)
    
    # Demo employee data - replace with your actual data loading
    employees = ["John Doe", "Jane Smith", "Mike Johnson", "Sarah Wilson"]
    selected_employee = st.selectbox("Choose your name", employees)
    
    # Step 3: Identity verification
    render_step_indicator(3, "Verify Identity", completed=False, current=True)
    
    st.info("📷 In a real implementation, this would show the employee's badge photo for comparison.")
    
    # Step 4: Photo capture
    render_step_indicator(4, "Take Your Photo", completed=False, current=True)
    
    with st.expander("📋 Photo Instructions", expanded=False):
        st.markdown("""
        - ☀️ Ensure good lighting
        - 👁️ Look directly at camera
        - 😷 Remove mask/glasses if possible
        - 📱 Hold phone steady
        """)
    
    snapshot = st.camera_input("📷 Tap to capture your photo")
    
    if snapshot:
        st.success("✅ Photo captured successfully!")
        
        # Simulate face recognition
        confidence = 85.5  # Demo confidence score
        
        if confidence >= 30:
            st.markdown(f"""
            <div class="metric-card">
                <h3>✅ Attendance Marked Successfully!</h3>
                <p><strong>Employee:</strong> {selected_employee}</p>
                <p><strong>Time:</strong> {datetime.now().strftime('%I:%M %p')}</p>
                <p><strong>Confidence:</strong> {confidence:.1f}%</p>
                <p><strong>Method:</strong> PWA + GPS + Face Recognition</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.balloons()
            
            # Demo attendance history
            st.markdown("### 📊 Recent Attendance")
            
            demo_data = [
                {"Date": "Today", "Check In": "09:00 AM", "Check Out": "06:15 PM", "Hours": "9.25h", "Status": "Full Day"},
                {"Date": "Yesterday", "Check In": "09:05 AM", "Check Out": "06:00 PM", "Hours": "8.92h", "Status": "Full Day"},
                {"Date": "Dec 18", "Check In": "09:15 AM", "Check Out": "05:45 PM", "Hours": "8.50h", "Status": "Full Day"},
            ]
            
            for record in demo_data:
                st.markdown(f"""
                <div class="attendance-card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                        <strong style="font-size: 1.1rem;">{record['Date']}</strong>
                        <span style="background: #e3f2fd; padding: 3px 8px; border-radius: 12px; font-size: 0.8rem;">PWA</span>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; margin-bottom: 0.5rem;">
                        <div><strong>In:</strong> {record['Check In']}</div>
                        <div><strong>Out:</strong> {record['Check Out']}</div>
                    </div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem;">
                        <div><strong>Hours:</strong> {record['Hours']}</div>
                        <div><strong>Status:</strong> {record['Status']}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.error("❌ Face recognition failed. Please try again with better lighting.")
    
    # PWA Features section
    st.markdown("### ⚙️ PWA Features")
    
    with st.expander("📱 Progressive Web App Capabilities", expanded=False):
        st.markdown("""
        **This app includes PWA features:**
        
        - 📱 **Install as App**: Add to home screen for native app experience
        - 🔄 **Offline Support**: Basic functionality works without internet
        - 📍 **Location Caching**: Remembers location for faster check-ins
        - 🔔 **Background Sync**: Syncs data when connection is restored
        - 🎨 **Responsive Design**: Optimized for all screen sizes
        
        **To install this PWA:**
        1. Open in Chrome/Safari on mobile
        2. Look for "Add to Home Screen" option
        3. Or click the install button in the header
        
        **Tips for best experience:**
        - Allow location permissions for GPS tracking
        - Enable camera permissions for face recognition
        - Use in good lighting conditions
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("🗑️ Clear Cache", help="Clear stored data"):
                st.success("Cache cleared!")
        
        with col2:
            if st.button("📊 View Stats", help="View attendance statistics"):
                st.info("Stats feature coming soon!")
    
    # Footer
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0; color: #666; font-size: 0.9rem; border-top: 1px solid #eee; margin-top: 2rem;">
        <p>📱 <strong>Company Attendance PWA</strong></p>
        <p>Version 2.0 • Enhanced Mobile Experience</p>
        <p style="font-size: 0.8rem;">🔐 Secure • 📍 GPS Enabled • 📱 PWA Ready</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    # Check if user is logged in (replace with your login logic)
    if "login_phase" not in st.session_state:
        st.session_state.login_phase = "verified"  # For demo purposes
    
    if st.session_state.login_phase == "verified":
        run_attendance()
    else:
        st.error("Please login first to access the attendance system.")
        